        MathHelper mathHelper = mock(MathHelper.class);
InOrder inOrder = inOrder(firstMock, secondMock);
InOrder inOrder = inOrder(singleMock);
            when(mathHelper.add(i * 8, 8)).thenReturn(i * 8 + 8);
        verify(mathHelper, times(1)).add(0, 8);
        verify(mathHelper, times(1)).add(8, 8);
        verify(mathHelper, times(1)).add(16, 8);
LinkedList mockedList = mock(LinkedList.class);
List firstMock = mock(List.class);
List mockedList = mock(List.class);
List secondMock = mock(List.class);
List singleMock = mock(List.class);
MockitoAnnotations.initMocks(testClass);
System.out.println(mockedList.get(0));
System.out.println(mockedList.get(1));
System.out.println(mockedList.get(999));
doThrow(new RuntimeException()).when(mockedList).clear();
firstMock.add("was called first");
inOrder.verify(firstMock).add("was called first");
inOrder.verify(secondMock).add("was called second");
inOrder.verify(singleMock).add("was added first");
inOrder.verify(singleMock).add("was added second");
mockedList.add("once");
mockedList.add("one");
mockedList.add("three times");
mockedList.add("twice");
mockedList.clear();
secondMock.add("was called second");
singleMock.add("was added first");
singleMock.add("was added second");
verify(mockedList).add("once");
verify(mockedList).add("one");
verify(mockedList).add(argThat(someString -> someString.length() > 5));
verify(mockedList).clear();
verify(mockedList).get(anyInt());
verify(mockedList, atLeast(2)).add("three times");
verify(mockedList, atLeastOnce()).add("three times");
verify(mockedList, atMost(5)).add("three times");
verify(mockedList, never()).add("never happened");
verify(mockedList, times(1).add("once");
verify(mockedList, times(2).add("twice");
verify(mockedList, times(3).add("three times");
verifyNoMoreInteractions(mockedList);
when(mockedList.contains(argThat(isValid()))).thenReturn("element");
when(mockedList.get(0)).thenReturn("first");
when(mockedList.get(1)).thenThrow(new RuntimeException());
when(mockedList.get(anyInt())).thenReturn("element");

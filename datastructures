				lowIndex = i;
            int val1 = l1 != null ? l1.val : 0;
        while(l1 != null || l2 != null || carry == 1) {
            int val2 = l2 != null ? l2.val : 0;
            int res = val1 + val2 + carry;
			array[i] = array[i-1];
			flag &= add(element);
			for ( ; node.next != null; node = node.next) {}
			head = new Node(element);
			if (array[i] < array[lowIndex]) {
			int j = indexLowest(array, i);
			node.next = new Node(element);
			swapElements(array, i, j);
		System.out.println(Arrays.toString(array));
		T[] copy = Arrays.copyOfRange(array, fromIndex, toIndex);
		add(element);
		array = (T[]) new Object[10];
		array[i] = array[j];
		array[index] = element;
		array[j] = temp;
		boolean flag = true;
		for (Object element: collection) {
		for (int i = 0; i < array.length; i++) {
		for (int i = start; i < array.length; i++) {
		for (int i=size-1; i>index; i--) {
		head = null;
		if (fromIndex < 0 || toIndex >= size || fromIndex > toIndex) {
		int lowIndex = start;
		int temp = array[i];
		public E data;
		public Node next;
		return indexOf(obj) != -1;
	private Node head;           // reference to the first node
	private T[] array;           // stores the elements
	private class Node {
	public List<T> subList(int fromIndex, int toIndex) {
	public boolean addAll(Collection<? extends E> collection) {
	public boolean containsAll(Collection<?> collection) {
	public static int indexLowest(int[] array, int start) {
	public static void selectionSort(int[] array) {
	public static void swapElements(int[] array, int i, int j) {
                    pivotIndex = leftIndex;
                    pivotIndex = rightIndex;
                    swap(nums, leftIndex, pivotIndex);
                    swap(nums, rightIndex, pivotIndex);
                if (nums[leftIndex] <= nums[pivotIndex]) {
                if (nums[rightIndex] >= nums[pivotIndex]) {
                smallerChildIndex = getRightChildIndex(index);
                swap(index, smallerChildIndex);
                temp[index] = array[left];
                temp[index] = array[right];
            capacity *= 2;
            if (array[left] <= array[right]) {
            if (hasRightChild(index) && rightChild(index) < leftChild(index)) {
            if (items[index] < items[smallerChildIndex]) {
            if (pivotIndex == rightIndex) {
            index = getParentIndex(index);
            index = smallerChildIndex;
            int smallerChildIndex = getLeftChildIndex(index);
            items = Arrays.copyOf(items, capacity * 2);
            swap(getParentIndex(index), index);
            throw new ArrayIndexOutOfBoundsException();
            } else if (pivotIndex == leftIndex) {
        E[] bigger = (E[]) new Object[array.length * 2];
        System.arraycopy(array, 0, bigger, 0, array.length);
        System.arraycopy(array, left, temp, index, leftEnd - left + 1);
        System.arraycopy(array, right, temp, index, rightEnd - right + 1);
        System.arraycopy(temp, leftStart, array, leftStart, size);
        array = bigger;
        if (indext < 0 || index >= size) {
        if (leftStart >= rightEnd) {
        if (size == capacity) {
        int index = leftStart;
        int left = leftStart;
        int leftEnd = (rightEnd + leftStart) / 2;
        int middle = (leftStart + rightEnd) / 2;
        int right = rightStart;
        int rightStart = leftEnd + 1;
        int size = rightEnd - leftStart + 1;
        mergeHalves(array, temp, leftStart, rightEnd);
        mergeSort(array, new int[array.length], 0, array.length - 1);
        mergeSort(array, temp, leftStart, middle);
        mergeSort(array, temp, middle + 1, rightEnd);
        return array[index];
        return isSameTree(a.left, b.left) && isSameTree(a.right, b.right);
        return isSubtree(s.left, t) || isSubtree(s.right, t);
        while (hasLeftChild(index)) {
        while (left <= leftEnd && right <= rightEnd) {
        while (leftIndex != rightIndex) {
        while(hasParent(index) && parent(index) > items[index]) {
    private boolean hasLeftChild(int index) { return getLeftChildIndex(index) < size; }
    private boolean hasRightChild(int index) { return getRightChildIndex(index) < size; }
    private int getLeftChildIndex(int parentIndex) { return 2 * parentIndex + 1; }
    private int getParentIndex(int childIndex) { return (childIndex - 1) / 2; }
    private int getRightChildIndex(int parentIndex) { return 2 * parentIndex + 2; }
    private int leftChild(int index) { return items[getLeftChildIndex(index)]; }
    private int parent(int index) { return items[getParentIndex(index)]; }
    private int rightChild(int index) { return items[getRightChildIndex(index)]; }
    private static void mergeHalves(int[] array, int[] temp, int leftStart, int rightEnd) {
    private static void mergeSort(int[] array, int[] temp, int leftStart, int rightEnd) {
    private void ensureCapacity() {
